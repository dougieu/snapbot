
import base64
exec(base64.b64decode('import subprocess
import sys
import pyautogui
import tkinter as tk
from tkinter import PhotoImage
import webbrowser
import time
import keyboard
import threading
import configparser
import os
from PIL import Image, ImageTk
from ttkthemes import ThemedStyle


# Function to install required packages
def install(package):
    subprocess.check_call([sys.executable, "-m", "pip", "install", package])
    print(f"[UPDATE] Checking/Installing Your Package (Package: {package})")


required_packages = ["pyautogui", "keyboard", "configparser", "ttkthemes", "Pillow"]

# Install all required packages
for package in required_packages:
    try:
        __import__(package)
    except ImportError:
        install(package)


# Configuration setup
config = configparser.ConfigParser()
file_path = "Configs/Config.ini"
full_path = os.path.abspath(file_path)

if os.path.isfile(file_path):
    print(f"[UPDATE] File Exists At Path: {full_path}")
    config.read(file_path)
else:
    print("[WARNING] Config File Not Found. Creating Now...")
    os.makedirs(os.path.dirname(file_path), exist_ok=True)
    config.add_section('HotKeys')
    config.set('HotKeys', 'record', 'f')
    config.set('HotKeys', 'start', 'r')
    config.set('HotKeys', 'stop', 'd')
    with open(file_path, "w") as config_file:
        config.write(config_file)
    print(f"[UPDATE] Config File Created At: {full_path}")

HotKeyOBJ = config["HotKeys"]
RecordHotkey = HotKeyOBJ["record"]
StartHotkey = HotKeyOBJ["start"]
StopHotkey = HotKeyOBJ["stop"]


class SnapBot:
    def __init__(self):
        self.running = False
        self.click_positions = []
        self.delay = 0.5
        self.auto_clicker_thread = None
        self.hotkeys = {'record': RecordHotkey, 'start': StartHotkey, 'stop': StopHotkey}

    def start_auto_clicker_thread(self):
        self.auto_clicker_thread = threading.Thread(target=self.start)
        self.auto_clicker_thread.start()

    def start(self):
        self.running = True
        while self.running:
            for pos in self.click_positions:
                pyautogui.moveTo(pos)
                pyautogui.click(pos)
                time.sleep(self.delay)
                if not self.running:
                    break

    def stop(self):
        self.running = False
        if self.auto_clicker_thread and self.auto_clicker_thread.is_alive():
            self.auto_clicker_thread.join()

    def record_click_position(self):
        pos = pyautogui.position()
        self.click_positions.append(pos)
        update_positions_text()

auto_clicker = SnapBot()


def toggle_auto_clicker():
    auto_clicker.record_click_position()
    print("[UPDATE] Toggle Auto Clicker function called")


def start_stop_auto_clicker():
    if not auto_clicker.running:
        if auto_clicker.click_positions:
            auto_clicker.start_auto_clicker_thread()
            print("[UPDATE] Start/Stop auto clicker function called")
        else:
            print("[WARNING] Please record at least one position before starting auto-clicker.")
    else:
        auto_clicker.stop()


def update_positions_text():
    positions_text.delete(1.0, tk.END)
    for pos in auto_clicker.click_positions:
        positions_text.insert(tk.END, f"({pos[0]}, {pos[1]})\n")


def clear_positions():
    auto_clicker.click_positions = []
    update_positions_text()
    print("[UPDATE] Clear Position function called")


def change_hotkeys_window():
    hotkeys_window = tk.Toplevel(window)
    hotkeys_window.title("Change Hotkeys")
    hotkeys_window.geometry("300x200")

    def change_hotkey(action, label):
        new_hotkey = input(f"Enter new hotkey for {action}: ")
        auto_clicker.hotkeys[action] = new_hotkey
        label.config(text=f"New hotkey for {action} is {new_hotkey}")
        config.set("HotKeys", action, new_hotkey)
        with open(file_path, "w") as config_file:
            config.write(config_file)

    record_label = tk.Label(hotkeys_window, text="")
    record_label.pack()

    record_button = tk.Button(hotkeys_window, text=f"Change Record Key ({auto_clicker.hotkeys['record']})",
                              command=lambda: change_hotkey('record', record_label))
    record_button.pack(pady=5)

    start_label = tk.Label(hotkeys_window, text="")
    start_label.pack()

    start_button = tk.Button(hotkeys_window, text=f"Change Start Key ({auto_clicker.hotkeys['start']})",
                             command=lambda: change_hotkey('start', start_label))
    start_button.pack(pady=5)


def change_delay(value):
    auto_clicker.delay = float(value)


def setup_hotkeys():
    keyboard.add_hotkey(auto_clicker.hotkeys['record'], toggle_auto_clicker)
    keyboard.add_hotkey(auto_clicker.hotkeys['start'], start_stop_auto_clicker)
    keyboard.add_hotkey(auto_clicker.hotkeys['stop'], auto_clicker.stop)


# Set up the window
window = tk.Tk()
window.geometry("550x500")
window.title("Dougie's Snapscore Bot")
window.resizable(False, False)
window.configure(bg="#212121")

# Load and set window icon
icon_image = PhotoImage(file="icon.png")
window.iconphoto(True, icon_image)
style = ThemedStyle(window)
style.theme_use('equilux')

canvas = tk.Canvas(
    window,
    bg="#212121",
    height=500,
    width=550,
    bd=0,
    highlightthickness=0,
    relief="ridge"
)
canvas.place(x=0, y=0)

# Main content area
canvas.create_rectangle(
    20,
    20,
    530,
    480,
    fill="#2A2A2A",
    outline=""
)

# Positions area
canvas.create_rectangle(
    280,
    30,
    520,
    230,
    fill="#415345",
    outline=""
)

canvas.create_text(
    290,
    35,
    anchor="nw",
    text="Positions",
    fill="#FFFFFF",
    font=("Inter", 14)
)

# Control buttons area
canvas.create_rectangle(
    30,
    30,
    270,
    230,
    fill="#505050",
    outline=""
)

# Social media area
canvas.create_rectangle(
    30,
    240,
    520,
    470,
    fill="#505050",
    outline=""
)


def open_snapchat():
    webbrowser.open_new("https://web.snapchat.com")


# Define and place the Snapchat button
snapchat_button = tk.Button(window, text="Open SnapChat", width=25, height=2, bg="#3A3A3A", fg="#FFFFFF", command=open_snapchat)
snapchat_button.place(x=40, y=420)

positions_text = tk.Text(window, height=9, width=30, font=("Arial", 10), bg="#505050", fg="#FFFFFF", insertbackground="#FFFFFF")
positions_text.place(x=290, y=60)


def create_hover_button(text, command, x, y):
    button = tk.Button(window, text=text, width=31, height=2, bg="#415345", fg="#FFFFFF", command=command)
    button.place(x=x, y=y)

    def on_enter(e):
        button['background'] = '#517355'

    def on_leave(e):
        button['background'] = '#415345'

    button.bind("<Enter>", on_enter)
    button.bind("<Leave>", on_leave)

    return button


# Adjusted button positions
record_button = create_hover_button(f"Record Position ({RecordHotkey})", toggle_auto_clicker, 35, 35)
start_stop_button = create_hover_button(f"Start/Stop ({StartHotkey})", start_stop_auto_clicker, 35, 85)
clear_button = create_hover_button("Clear Positions", clear_positions, 35, 135)
hotkeys_button = create_hover_button("Change HotKeys", change_hotkeys_window, 35, 185)

# Adjusted position for the delay slider further down
delay_slider = tk.Scale(
    window,
    from_=0.1,
    to=3,
    resolution=0.1,
    orient=tk.HORIZONTAL,
    length=230,
    command=change_delay,
    bg="#3a3a3a",
    fg="#FFFFFF",
    troughcolor="#415345",
    highlightbackground="#212121",
    sliderrelief='flat',
    sliderlength=20,
    width=15
)
delay_slider.set(0.5)
delay_slider.place(x=35, y=275)

# Add a bold label for the delay slider
delay_label = tk.Label(
    window,
    text="Edit Delay",
    bg="#3a3a3a",
    fg="#FFFFFF",
    font=("Arial", 14, "bold")
)
delay_label.place(x=35, y=245)


def open_credits():
    webbrowser.open_new("https://www.dougie.wtf")


# Load and resize the main image
main_image_path = "snapcode.png"
main_image = Image.open(main_image_path)
main_image = main_image.resize((150, 150))
main_image_tk = ImageTk.PhotoImage(main_image)

# Create label with no border and transparent background for the big image
main_image_label = tk.Label(window, image=main_image_tk, bg="#505050", bd=0, highlightthickness=0)
main_image_label.place(x=500 - 140, y=230 + 200 - 140)

# Bind the label click event to open_credits function
main_image_label.bind("<Button-1>", lambda event: open_credits())

# Keep a reference to avoid garbage collection
main_image_label.image = main_image_tk

# Add the "Click here" text with an up arrow, effectively making the background transparent
click_here_text = tk.Label(window, text="\u2191 Click here \u2191", fg="#FFFFFF", font=("Arial", 12, "bold"), bg="#505050")
text_width = 80

# Adjust the y position to move the text slightly less up
click_here_text.place(x=485 - 140 + (150 - text_width) // 2, y=440)


def on_closing():
    auto_clicker.stop()  # Stop the auto-clicker
    window.destroy()  # Close the window
    os._exit(0)  # Forcefully terminate the entire process


# Set up the protocol for window closing
window.protocol("WM_DELETE_WINDOW", on_closing)

# Set up hotkeys
setup_hotkeys()

window.mainloop()
').decode())
